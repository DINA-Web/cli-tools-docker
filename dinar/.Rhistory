author2
library("xml2")
library("dplyr")
library("purrr")
base <- "~/repos/dina-web/dw-classifications/plutof-data/"
header <- readLines(paste0(base, "header.xml"))
footer <- readLines(paste0(base, "3000188.xml"), warn = FALSE)[-c(1:5)]
doc <- paste(collapse = "\n", c(header, footer))
# parse Dyntaxa XML tree using xpath expressions for nodes and their parents
xml <- read_xml(doc)
ns <- xml_ns(xml)
taxa <- xml_find_all(xml, "//a:Taxon/a:Id/..", ns)
xml2int <- function(x)
as.numeric(xml_text(x))
get_taxon_id <- function(xml)
xml2int(xml_find_all(xml, "./a:Id", ns))
ids <- map(taxa, get_taxon_id)
get_parent <- function(xml)
xml2int(xml_find_all(xml, "../../../a:Taxon/a:Id", ns))
parents <- map(taxa, get_parent)
links <-
data_frame(
Id = as.numeric(ids),
Parent = as.numeric(parents)) %>%
distinct
nodes <- tbl_df(read.csv(paste0(base, "butterflies.csv"), stringsAsFactors = FALSE))
nodelink <-
nodes %>%
left_join(links, by = "Id") %>%
select(Parent, Id, everything())
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid,
vernacular_names = CommonName) %>%
mutate(use_parenthesis = ifelse(grepl("(", author, fixed = TRUE), 1, NA))
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid,
vernacular_names = CommonName) %>%
mutate(use_parenthesis = ifelse(grepl("(", author, fixed = TRUE), 1, NA))
tsv <-
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid,
vernacular_names = CommonName) %>%
mutate(use_parenthesis = ifelse(grepl("(", author, fixed = TRUE), 1, NA)) #%>%
author2 <- gsub(".*?(\\d{4}).*?", "\\1", perl = TRUE, tsv$author)
author2
author2 <- gsub(".*?(\\d{1,4}).*?", "\\1", perl = TRUE, tsv$author)
gsub(".*?(\\d{1,4}).*?", "\\1", perl = TRUE, tsv$author)
gsub(".*?(\\d{1,4}).*", "\\1", perl = TRUE, tsv$author)
year <- as.integer(gsub(".*?(\\d{1,4}).*", "\\1", perl = TRUE, tsv$author))
year
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid,
vernacular_names = CommonName) %>%
mutate(use_parenthesis = ifelse(grepl("(", author, fixed = TRUE), 1, NA)) %>%
mutate(year = as.integer(gsub(".*?(\\d{1,4}).*", "\\1", perl = TRUE, author)))
tsv$vernacular_names
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid) %>%
mutate(use_parenthesis = ifelse(grepl("(", author, fixed = TRUE), 1, NA)) %>%
mutate(year = as.integer(gsub(".*?(\\d{1,4}).*", "\\1", perl = TRUE, author))) %>%
mutate(vernacular_names = ifelse(is.na(vernacular_names, NA, paste0(vernacular_names, ":swe"))))
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid) %>%
mutate(use_parenthesis = ifelse(grepl("(", author, fixed = TRUE), 1, NA)) %>%
mutate(year = as.integer(gsub(".*?(\\d{1,4}).*", "\\1", perl = TRUE, author))) %>%
mutate(vernacular_names = ifelse(is.na(CommonName, NA, paste0(CommonName, ":swe"))))
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid, CommonName) %>%
mutate(use_parenthesis = ifelse(grepl("(", author, fixed = TRUE), 1, NA)) %>%
mutate(year = as.integer(gsub(".*?(\\d{1,4}).*", "\\1", perl = TRUE, author))) %>%
mutate(vernacular_names = ifelse(is.na(CommonName, NA, paste0(CommonName, ":swe"))))
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid, CommonName) %>%
mutate(use_parenthesis = ifelse(grepl("(", author, fixed = TRUE), 1, NA)) %>%
mutate(year = as.integer(gsub(".*?(\\d{1,4}).*", "\\1", perl = TRUE, author))) %>%
mutate(vernacular_names = ifelse(is.na(CommonName), NA, paste0(CommonName, ":swe")))
tsv$vernacular_names
tsv <-
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid, CommonName) %>%
mutate(use_parenthesis = ifelse(grepl("(", author, fixed = TRUE), 1, NA)) %>%
mutate(year = as.integer(gsub(".*?(\\d{1,4}).*", "\\1", perl = TRUE, author))) %>%
mutate(vernacular_names = ifelse(is.na(CommonName), NA, paste0(CommonName, ":swe")))
tsv$vernacular_names
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid, CommonName) %>%
mutate(use_parenthesis = ifelse(grepl("(", author, fixed = TRUE), 1, NA)) %>%
mutate(year = as.integer(gsub(".*?(\\d{1,4}).*", "\\1", perl = TRUE, author))) %>%
mutate(vernacular_names = ifelse(is.na(CommonName), NA, paste0(CommonName, ":swe")))
unique(tsv$author)
gsub("()", "", unique(tsv$author))
gsub("()", "", unique(tsv$author), perl = TRUE)
gsub("(|)", "", unique(tsv$author), perl = TRUE)
gsub("\(|\)", "", unique(tsv$author), perl = TRUE)
gsub("[()]", "", unique(tsv$author), perl = TRUE)
gsub(",\s+\\d{4}", "", unique(tsv$author), perl = TRUE)
gsub(",\\s+\\d{4}", "", unique(tsv$author), perl = TRUE)
gsub(",\\s+\[*\\d{4}\]*", "", unique(tsv$author), perl = TRUE)
gsub(",\\s+\\[*\\d{4}\\]*", "", unique(tsv$author), perl = TRUE)
gsub(",*\\s*\\[*\\d{4}\\]*", "", unique(tsv$author), perl = TRUE)
v <- gsub("[()]", "", tsv$author, perl = TRUE)
v <- gsub(",*\\s*\\[*\\d{4}\\]*", "", v, perl = TRUE)
v
v <- gsub("[()\\]\\[]", "", tsv$author, perl = TRUE)
v <- gsub(",*\\s*\\[*\\d{4}\\]*", "", v, perl = TRUE)
v
tsv %>%
select(taxon_id, parent_taxon_id, taxon_rank_id, epithet,
author, year, code, vernacular_names, use_parentheses)
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid, CommonName) %>%
mutate(use_parentheses = ifelse(grepl("(", author, fixed = TRUE), 1, NA)) %>%
mutate(year = as.integer(gsub(".*?(\\d{1,4}).*", "\\1", perl = TRUE, author))) %>%
mutate(vernacular_names = ifelse(is.na(CommonName), NA, paste0(CommonName, ":swe")))
tsv <-
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid, CommonName) %>%
mutate(use_parentheses = ifelse(grepl("(", author, fixed = TRUE), 1, NA)) %>%
mutate(year = as.integer(gsub(".*?(\\d{1,4}).*", "\\1", perl = TRUE, author))) %>%
mutate(vernacular_names = ifelse(is.na(CommonName), NA, paste0(CommonName, ":swe")))
v <- gsub("[()\\]\\[]", "", tsv$author, perl = TRUE)
v <- gsub(",*\\s*\\[*\\d{4}\\]*", "", v, perl = TRUE)
tsv$vernicular_name <- v
tsv %>%
select(taxon_id, parent_taxon_id, taxon_rank_id, epithet,
author, year, code, vernacular_names, use_parentheses)
tsv <-
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid, CommonName) %>%
mutate(use_parentheses = ifelse(grepl("(", author, fixed = TRUE), 1, NA)) %>%
mutate(year = as.integer(gsub(".*?(\\d{1,4}).*", "\\1", perl = TRUE, author))) %>%
mutate(vernacular_names = ifelse(is.na(CommonName), NA, paste0(CommonName, ":swe")))
a <- gsub("[()\\]\\[]", "", tsv$author, perl = TRUE)
a <- gsub(",*\\s*\\[*\\d{4}\\]*", "", v, perl = TRUE)
tsv$author <- v
tsv %>%
select(taxon_id, parent_taxon_id, taxon_rank_id, epithet,
author, year, code, vernacular_names, use_parentheses)
out <- paste0(base, "lepidoptera.tsv")
write.csv(tsv, file = out, sep = "\t", row.names = FALSE, na = "")
out <- paste0(base, "lepidoptera.tsv")
write.table(tsv, file = out, sep = "\t", row.names = FALSE, na = "")
write.table(tsv, file = out, sep = "\t",
row.names = FALSE, na = "", quote = FALSE)
out <-
tsv %>%
select(taxon_id, parent_taxon_id, taxon_rank_id, epithet,
author, year, code, vernacular_names, use_parentheses) %>%
select(-CommonName)
# 3000188	0	40	Lepidoptera	Linnaeus	1758	3000188	fjärilar:swe
# 2002975	3000188	48	Hesperioidea	Latreille	1809	2002975	tjockhuvudfjärilar:swe
tsv <-
nodelink %>%
select(taxon_id = Id, parent_taxon_id = Parent, taxon_rank_id = CategoryId,
epithet = ScientificName, author = Author, code = Guid, CommonName) %>%
mutate(use_parentheses = ifelse(grepl("(", author, fixed = TRUE), 1, NA)) %>%
mutate(year = as.integer(gsub(".*?(\\d{1,4}).*", "\\1", perl = TRUE, author))) %>%
mutate(vernacular_names = ifelse(is.na(CommonName), NA, paste0(CommonName, ":swe")))
a <- gsub("[()\\]\\[]", "", tsv$author, perl = TRUE)
a <- gsub(",*\\s*\\[*\\d{4}\\]*", "", v, perl = TRUE)
tsv$author <- a
plutof <-
tsv %>%
select(taxon_id, parent_taxon_id, taxon_rank_id, epithet,
author, year, code, vernacular_names, use_parentheses) %>%
select(-CommonName)
# 3000188	0	40	Lepidoptera	Linnaeus	1758	3000188	fjärilar:swe
# 2002975	3000188	48	Hesperioidea	Latreille	1809	2002975	tjockhuvudfjärilar:swe
out <- paste0(base, "lepidoptera.tsv")
write.table(plutof, file = out, sep = "\t",
row.names = FALSE, na = "", quote = FALSE)
tsv %>%
select(taxon_id, parent_taxon_id, taxon_rank_id, epithet,
author, year, code, vernacular_names, use_parentheses)
plutof <-
tsv %>%
select(taxon_id, parent_taxon_id, taxon_rank_id, epithet,
author, year, code, vernacular_names, use_parentheses) #%>%
out <- paste0(base, "lepidoptera.tsv")
write.table(plutof, file = out, sep = "\t",
row.names = FALSE, na = "", quote = FALSE)
plutof <-
tsv %>%
select(taxon_id, parent_taxon_id, taxon_rank_id, epithet,
author, year, code, vernacular_names, use_parentheses) %>%
arrange(desc(parent_taxon_id), desc(taxon_id))
# 3000188	0	40	Lepidoptera	Linnaeus	1758	3000188	fjärilar:swe
# 2002975	3000188	48	Hesperioidea	Latreille	1809	2002975	tjockhuvudfjärilar:swe
out <- paste0(base, "lepidoptera.tsv")
write.table(plutof, file = out, sep = "\t",
row.names = FALSE, na = "", quote = FALSE)
plutof <-
tsv %>%
select(taxon_id, parent_taxon_id, taxon_rank_id, epithet,
author, year, code, vernacular_names, use_parentheses) %>%
arrange(-desc(parent_taxon_id), -desc(taxon_id))
# 3000188	0	40	Lepidoptera	Linnaeus	1758	3000188	fjärilar:swe
# 2002975	3000188	48	Hesperioidea	Latreille	1809	2002975	tjockhuvudfjärilar:swe
out <- paste0(base, "lepidoptera.tsv")
write.table(plutof, file = out, sep = "\t",
row.names = FALSE, na = "", quote = FALSE)
View(plutof)
plutof <-
tsv %>%
select(taxon_id, parent_taxon_id, taxon_rank_id, epithet,
author, year, code, vernacular_names, use_parentheses) %>%
arrange(taxon_rank_id, parent_taxon_id, taxon_id)
View(plutof)
plutof <-
tsv %>%
select(taxon_id, parent_taxon_id, taxon_rank_id, epithet,
author, year, code, vernacular_names, use_parentheses) %>%
arrange(taxon_rank_id, parent_taxon_id, taxon_id)
# 3000188	0	40	Lepidoptera	Linnaeus	1758	3000188	fjärilar:swe
# 2002975	3000188	48	Hesperioidea	Latreille	1809	2002975	tjockhuvudfjärilar:swe
out <- paste0(base, "lepidoptera.tsv")
write.table(plutof, file = out, sep = "\t",
row.names = FALSE, na = "", quote = FALSE)
which(is.na(plutof$parent_taxon_id))
plutof$parent_taxon_id[which(is.na(plutof$parent_taxon_id))] <- 0
out <- paste0(base, "lepidoptera.tsv")
write.table(plutof, file = out, sep = "\t",
row.names = FALSE, na = "", quote = FALSE)
library(purrr)
library(dplyr)
library(RMySQL)
library(stringr)
#install.packages("getopt")
#devtools::install_github("rstats-db/DBI")
#devtools::install_github("rstats-db/RMySQL")
library(getopt)
get_args <- function(args) {
header <- "long, short, enum, type, description, default"
help <- "help, h, 0, logical, usage description"
specification <- paste(sep = "\n", header, help, args)
s <- gsub(", ", ",", specification)
df <- read.csv2(textConnection(s), sep = ",", quote = "")
m <- as.matrix.data.frame(df[ ,1:5])
opt <- getopt(m)
# if help was asked for print a friendly message
# and exit with a non-zero error code
if (!is.null(opt$help)) {
ncat(getopt(m, usage = TRUE))
q(status = 1)
}
return(opt)
}
get_config <- function(config_file, section) {
if (any(missing(config_file), !file.exists(config_file)))
stop("No config file given or config file not found")
config <- readLines(config_file)
eoc <- length(config)
beg <- 1
end <- eoc
if (!missing(section) && grepl(section, config)) {
beg <- grep(section, config, fixed = TRUE) + 1
nxt <- grep("[.*?]", config[beg:eoc])
nxt <- ifelse(length(nxt) > 0, nxt[1], eoc)
end <- ifelse((nxt - 1 > beg && nxt < eoc), nxt - 1, eoc)
} else {
message("No config file section or section not found in file")
}
cfg <- grep("#", config[beg:end], value = TRUE, invert = TRUE)
cfg <- grep("=", cfg, value = TRUE)
pairs <- strsplit(cfg, "=")
namez <- trimws(sapply(pairs, "[[", 1))
valuez <- trimws(sapply(pairs, "[[", 2))
df <- as.data.frame(rbind(valuez), stringsAsFactors = FALSE)
names(df) <- namez
return (df)
}
# set global option to not use factors
# this has side-effect on read.csv
options(stringsAsFactors = FALSE)
options(row.names = FALSE)
options(width = 160)
args <- "db, d, 2, character, path to sqlite db file with name data"
opt <- get_args(args)
db <- "names.sqlite"
if (is.null(opt$db))
message("Using db: ", db)
if (!is.null(opt$db)) db <- opt$db
if (interactive()) setwd("~/repos/dina-web/dw-cli-tools/dinar")
if (!file.exists(db)) {
warning("Couldn't find name db: ", db)
q(status = 1)
}
cfg <- get_config("dina.cfg", "MySQL")
src_mysql_fixed <- function(dbname, host, port = 3306, user, password, ...) {
con <- dbConnect(RMySQL::MySQL(), dbname = dbname, host = host,
port = port, username = user, password = password, ...)
message("Setting character set for connection")
#  res <- dbGetQuery(con, statement = "SET collation_connection = utf8_general_ci;")
res <- dbGetQuery(con, statement = "SET NAMES utf8;")
info <- dbGetInfo(con)
src_sql("mysql", con,
info = info, disco = dplyr:::db_disconnector(con, "mysql"))
}
dina_db <- src_mysql_fixed(
dbname = cfg$Database,
host = ifelse(interactive(), "127.0.0.1", cfg$Host),
user = cfg$User,
password = cfg$Password)
message("Reading name database")
names_db <- src_sqlite(path = db)
names_df <- names_db %>% tbl("names") %>% collect
firstnames <- names_df$firstnames
boys <- names_df$boys
girls <- names_df$girls
lastnames <- names_df$lastnames
surnames <- names_df$surnames
message("Will now process agent, specifyuser, address, dnasequence")
agent <- dina_db %>% tbl("agent") %>% collect
user <- dina_db %>% tbl("specifyuser") %>% collect
address <- dina_db %>% tbl("address") %>% collect
dna <- dina_db %>% tbl("dnasequence") %>% collect
unicode_df <- function(df) {
res <- data.frame(
stringsAsFactors = FALSE,  # this ensures columns will be chr rather than Factor
apply(df, MARGIN = 2,  # MARGIN = 2 means across cols, see docs!
function(x) iconv(x, from = "latin1", to = "UTF-8")))
return (res)
}
latin1_df <- function(df) {
res <- data.frame(
stringsAsFactors = FALSE,  # this ensures columns will be chr rather than Factor
apply(df, MARGIN = 2,  # MARGIN = 2 means across cols, see docs!
function(x) iconv(x, from = "UTF-8", to = "latin1")))
return (res)
}
#agent <- latin1_df(agent)
#user <- latin1_df(user)
#address <- latin1_df(address)
#dna <- latin1_df(dna)
cardinality_df <- function(df) {
uniques <- apply(df, MARGIN = 2,  # MARGIN = 2 means across cols, see docs!
function(x) unique(x))
#  print(head(uniques))
u <- data.frame(t(data.frame(stringsAsFactors = FALSE,
lapply(uniques, function(x) substr(iconv(paste(collapse = ", ", x), from = "latin1", to = "utf-8"), 1, 80)))))
n <- data.frame(t(data.frame(lapply(uniques, length))))
res <- data.frame(stringsAsFactors = FALSE,
colnames = rownames(n), count_distinct = n[ ,1], unique_values_80 = u[ ,1])
return (res)
}
message("FYI: table data summaries")
message("agent")
#cardinality_df(agent)
message("user")
#cardinality_df(user)
message("address")
#cardinality_df(address)
message("dna")
#cardinality_df(dna)
message("Now processing agent table data")
fn <- agent$FirstName
ln <- agent$LastName
initials <- agent$Initials
middle <- agent$MiddleInitial
message("Generating random name lookup tables")
lu_firstnames <- c(firstnames, boys, girls)
# create 5000 combinations of "dual surnames + lastnames"
combos <- expand.grid(surnames, sample(lastnames, 5))
combos <- paste(combos$Var1, combos$Var2)
lu_lastnames <- c(lastnames, surnames, combos)
message("Mapping old values to new random values")
fr_firstnames <- unique(agent$FirstName) # 1965
agent$FirstName <-
plyr::mapvalues(agent$FirstName,
from = fr_firstnames,
to = sample(lu_firstnames, length(fr_firstnames)))
fr_lastnames <- unique(agent$LastName) # 4939
agent$LastName <-
plyr::mapvalues(agent$LastName,
from = fr_lastnames,
to = sample(lu_lastnames, length(fr_lastnames)))
fr_initials <- unique(agent$Initials) # 3
agent$Initials <-
plyr::mapvalues(agent$Initials,
from = fr_initials,
to = sample(c("M", "X", "Y", "Z"), length(fr_initials), replace = TRUE))
fr_middle <- unique(agent$MiddleInitial) # 178
agent$MiddleInitial <-
plyr::mapvalues(agent$MiddleInitial,
from = fr_middle,
to = sample(toupper(letters), length(fr_middle), replace = TRUE))
fr_abbrev <- unique(agent$Abbreviation) # 77
agent$Abbreviation <-
plyr::mapvalues(agent$Abbreviation,
from = fr_abbrev,
to = sample(toupper(letters), length(fr_abbrev), replace = TRUE))
agent$Email <-
paste0(tolower(agent$FirstName), "@dina-web.example.net")
agent$DateOfBirth <- "1924-01-23"
agent$DateOfDeath <- "1944-07-18"
message("Processing dnasequence table")
new_dnaseq <- paste0(collapse = "",
sample(c("T", "A", "G", "C"),
size = max(nchar(dna$GeneSequence)),
replace = TRUE))
dna$GeneSequence <- new_dnaseq
dna$Text1 <- NA
dna$Text2 <- NA
message("Processing specify user table")
fr_username <- unique(user$Name)
# generate valid usernames but random
lu_username <- paste0(
substr(tolower(sample(c(boys, girls), 1000)), 1, 4),
substr(tolower(surnames), 1, 4))
lu_username <- lu_username[which(nchar(lu_username) > 7, arr.ind = TRUE)]
if (any(duplicated(lu_username)))
warning("Duplicated 8 letter usernames!")
user$Name <-
plyr::mapvalues(user$Name,
from = fr_username,
to = sample(lu_username, length(fr_username)))
user$EMail <- paste0(user$Name, "@dina-web.example.net")
user$Password <- ""
user$LoginCollectionName <- "Example Collection"
user$LoginDisciplineName <- "Example Discipline"
message("Processing address table")
# QUICKFIX: not mapping values, just reusing single value everywhere...
address$Address <- "Frescativägen 40"
address$Address2 <- "Box 50007"
address$Address3 <- "Stockholm"
address$Address4 <- ""
address$Address5 <- ""
address$City <- "Stockholm"
address$Country <- "Sweden"
address$Fax <- "555-555 555"
address$Phone1 <- "555-555 555"
address$Phone2 <- "555-555 555"
address$PostalCode <- "100 00"
address$RoomOrBuilding <- "Office 1247"
address$State <- "Uppland"
address$TypeOfAddr <- "Permanent"
tbldf_enc <- function(tbl_df, encoding = "latin1") {
res <- data.frame(stringsAsFactors = FALSE,
apply(tbl_df, MARGIN = 2,
function(x) iconv(x, to = encoding)))
return (tbl_df(res))
}
upsert_df <- function(df, dplyr_con, table) {
con <- dplyr_con$con
details <- dbGetQuery(con, "show variables like 'character_set_%'")
db_enc <-
details %>%
filter(Variable_name == "character_set_database") %>%
select(Value) %>% .$Value
message("Uploading to dbtable ", table, " using db enc: ", db_enc)
csvfile <- tempfile()
write.csv(tbldf_enc(df, "utf8"),
csvfile, row.names = FALSE, fileEncoding = db_enc)
anon_table <- paste0("anon_", table)
message("Checking if ", anon_table, " exists...")
if (dbExistsTable(con, name = anon_table))
dbRemoveTable(con, name = anon_table)
res <- dbWriteTable(con, anon_table, csvfile, overwrite = TRUE)
message("Replacing ", table, " with ", anon_table, " ... ")
res <- dbSendQuery(con, "set foreign_key_checks = 0;")
sql <- paste0("replace into ", table, " select * from ", anon_table, ";")
res <- dbSendQuery(con, sql)
res <- dbGetQuery(con, "set foreign_key_checks = 1;")
message("Removing ", anon_table)
res <- dbRemoveTable(con, name = anon_table)
return (res)
}
#upsert_df(address, dina_db, "address")
# Upload the anonymized user table
replaceTable <- function(dina_db, table, df) {
anon_table <- paste0("anon_", table)
con <- dina_db$con
message("Checking if ", anon_table, " exists...")
if (dbExistsTable(con, name = anon_table))
dbRemoveTable(con, name = anon_table)
#message("Setting utf8 names and character set...")
#res <- dbSendQuery(con, "set names 'utf8'")
#res <- dbSendQuery(con, 'set character set utf8')
message("Writing table", anon_table, "to db ...")
#  res <- dbWriteTable(con, name = anon_table, value = as.data.frame(df), row.names = FALSE)
#  res <- copy_to(dina_db, tbldf_enc(df), name = anon_table)
res <- copy_to(dina_db, tbldf_enc(df, "utf8"), anon_table,
temporary = FALSE, overwrite = TRUE)
message("Replacing ", table, " with ", anon_table, " ... ")
res <- dbSendQuery(con, "set foreign_key_checks = 0;")
res <- dbSendQuery(con,
paste0("replace into ", table, " select * from ", anon_table, ";"))
res <- dbGetQuery(con, "set foreign_key_checks = 1;")
message("Removing ", anon_table)
#  res <- dbRemoveTable(con, name = anon_table)
res <- dbDisconnect(con)
}
tables <- c("agent", "specifyuser", "address", "dnasequence")
message("Renonymizing database")
user$IsLoggedIn <- FALSE
user$IsLoggedInReport <- FALSE
replaceTable(dina_db, "specifyuser", user)
user
user$AccumMinLoggedIn
